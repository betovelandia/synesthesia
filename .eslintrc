{
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module"
  },
  "env": {
    "browser": true,
    "node": true,
    "jasmine": true,
    "es6": true
  },
  "globals": {
    "browser": true,
    "__lift": true,
    "jest": true
  },
  "rules": {

    // Posible Errors.
    "max-len": ["error", 100],
    "comma-dangle": 2, //disallow or enforce trailing commas (recommended)
    "no-cond-assign": 2, //disallow assignment in conditional expressions (recommended)
    "no-console": 1, //disallow use of console in the node environment (recommended)
    "no-constant-condition": 0, //allow use of constant expressions in conditions (used for saga watchers)
    "no-control-regex": 2, //disallow control characters in regular expressions (commended)
    "no-debugger": 2, //disallow use of debugger (recommended)
    "no-dupe-args": 2, //disallow duplicate arguments in functions (recommended)
    "no-dupe-keys": 2, //disallow duplicate keys when creating object literals (recommended)
    "no-duplicate-case": 2, //disallow a duplicate case label. (recommended)
    "no-empty-character-class": 2, //disallow the use of empty character classes in regular pressions (recommended)
    "no-empty": 2, //disallow empty statements (recommended)
    "no-ex-assign": 2, //disallow assigning to the exception in a catch block (recommended)
    "no-extra-boolean-cast": 2, //disallow double-negation boolean casts in a boolean ntext (recommended)
    "no-extra-parens": 0, //disallow unnecessary parentheses
    "no-extra-semi": 2, //disallow unnecessary semicolons (recommended)
    "no-func-assign": 2, //disallow overwriting functions written as function declarations (commended)
    "no-inner-declarations": 2, //disallow function or variable declarations in nested ocks (recommended)
    "no-invalid-regexp": 2, //disallow invalid regular expression strings in the RegExp nstructor (recommended)
    "no-irregular-whitespace": 2, //disallow irregular whitespace outside of strings and mments (recommended)
    "no-negated-in-lhs": 2, //disallow negation of the left operand of an in expression (commended)
    "no-obj-calls": 2, //disallow the use of object properties of the global object (Math d JSON) as functions (recommended)
    "no-regex-spaces": 2, //disallow multiple spaces in a regular expression literal (commended)
    "no-sparse-arrays": 2, //disallow sparse arrays (recommended)
    "no-unreachable": 2, //disallow unreachable statements after a return, throw, continue,  break statement (recommended)
    "use-isnan": 2, //disallow comparisons with the value NaN (recommended)
    "valid-jsdoc": [1, { "requireParamDescription": false, "requireReturnDescription": false}], //Ensure JSDoc comments are valid
    "valid-typeof": 2, //Ensure that the results of typeof are compared against a valid ring (recommended)
    "no-unexpected-multiline": 2, //Avoid code that looks like two expressions but is tually one

    // Best Practices.
    "accessor-pairs" : 2, //Enforces getter/setter pairs in objects
    "block-scoped-var" : 2, //treat var statements as if they were block scoped
    "complexity" : 2, //specify the maximum cyclomatic complexity allowed in a program
    "consistent-return" : 2, //require return statements to either always or never specify lues
    "curly" : 2, //specify curly brace conventions for all control statements
    "default-case" : 2, //require default case in switch statements
    "dot-notation" : 2, //encourages use of dot notation whenever possible
    "dot-location" : 2, //enforces consistent newlines before or after dots
    "eqeqeq" : 2, //require the use of === and !==
    "guard-for-in" : 2, //make sure for-in loops have an if statement
    "no-alert" : 2, //disallow the use of alert, confirm, and prompt
    "no-caller" : 2, //disallow use of arguments.caller or arguments.callee
    "no-div-regex" : 2, //disallow division operators explicitly at beginning of regular pression
    "no-else-return" : 2, //disallow else after a return in an if
    "no-eq-null" : 2, //disallow comparisons to null without a type-checking operator
    "no-eval" : 2, //disallow use of eval()
    "no-extend-native" : 2, //disallow adding to native types
    "no-extra-bind" : 2, //disallow unnecessary function binding
    "no-fallthrough" : 2, //disallow fallthrough of case statements (recommended)
    "no-floating-decimal" : 2, //disallow the use of leading or trailing decimal points in meric literals
    "no-implicit-coercion" : 2, //disallow the type conversions with shorter notations
    "no-implied-eval" : 2, //disallow use of eval()-like methods
    "no-invalid-this" : 0, //disallow this keywords outside of classes or class-like objects
    "no-iterator" : 2, //disallow usage of __iterator__ property
    "no-labels" : 2, //disallow use of labeled statements
    "no-lone-blocks" : 2, //disallow unnecessary nested blocks
    "no-loop-func" : 2, //disallow creation of functions within loops
    "no-multi-spaces" : 2, //disallow use of multiple spaces
    "no-multi-str" : 2, //disallow use of multiline strings
    "no-native-reassign" : 2, //disallow reassignments of native objects
    "no-new-func" : 2, //disallow use of new operator for Function object
    "no-new-wrappers" : 2, //disallows creating new instances of String,Number, and Boolean
    "no-new" : 2, //disallow use of the new operator when not part of an assignment or mparison
    "no-octal-escape" : 2, //disallow use of octal escape sequences in string literals, ch as var foo = "Copyright \251";
    "no-octal" : 2, //disallow use of octal literals (recommended)
    "no-param-reassign" : 2, //disallow reassignment of function parameters
    "no-process-env" : 2, //disallow use of process.env
    "no-proto" : 2, //disallow usage of __proto__ property
    "no-redeclare" : 2, //disallow declaring the same variable more than once (recommended)
    "no-return-assign" : 2, //disallow use of assignment in return statement
    "no-script-url" : 2, //disallow use of javascript: urls.
    "no-self-compare" : 2, //disallow comparisons where both sides are exactly the same
    "no-sequences" : 2, //disallow use of the comma operator
    "no-throw-literal" : 2, //restrict what can be thrown as an exception
    "no-unused-expressions" : 2, //disallow usage of expressions in statement position
    "no-useless-call" : 2, //disallow unnecessary .call() and .apply()
    "no-void" : 2, //disallow use of the void operator
    "no-warning-comments" : 0, //disallow usage of configurable warning terms in comments e.g. TODO or FIXME
    "no-with" : 2, //disallow use of the with statement
    "radix" : 2, //require use of the second argument for parseInt()
    "vars-on-top" : 2, //require declaration of all vars at the top of their containing ope
    "wrap-iife" : 2, //require immediate function invocation to be wrapped in parentheses
    "yoda" : 2, //require or disallow Yoda conditions

    // Variables
    "init-declarations" : 0, //enforce or disallow variable initializations at definition
    "no-catch-shadow" : 2, //disallow the catch clause parameter name being the same as a riable in the outer scope
    "no-delete-var" : 2, //disallow deletion of variables (recommended)
    "no-label-var" : 2, //disallow labels that share a name with a variable
    "no-shadow-restricted-names" : 2, //disallow shadowing of names such as arguments
    "no-shadow" : 2, //disallow declaration of variables already declared in the outer scope
    "no-undef-init" : 2, //disallow use of undefined when initializing variables
    "no-undef" : 2, //disallow use of undeclared variables unless mentioned in a /*global  block (recommended)
    "no-undefined" : 0, //disallow use of undefined variable
    "no-unused-vars" : 1, //disallow declaration of variables that are not used in the code ecommended)
    "no-use-before-define" : 2, //disallow use of variables before they are defined

    // Stylistic Issues

    "array-bracket-spacing": 1, //enforce spacing inside array brackets
    "brace-style": [1, "1tbs", {"allowSingleLine":true} ], //enforce one true brace style
    "camelcase": 1, //require camel case names
    "comma-spacing": 1, //enforce spacing before and after comma
    "comma-style": 1, //enforce one true comma style
    "computed-property-spacing": 1, //require or disallow padding inside computed properties
    "consistent-this": 1, //enforce consistent naming when capturing the current execution ntext
    "eol-last": 0, //enforce newline at the end of file, with no multiple empty lines
    "func-names": 0, //require function expressions to have a name
    "func-style": 0, //enforce use of function declarations or expressions
    "id-length": 0, //this option enforces minimum and maximum identifier lengths (variable mes, property names etc.) (off by default)
    "indent": ["error", 2, {"SwitchCase": 1}], //specify tab or space width for your code
    "key-spacing": 1, //enforce spacing between keys and values in object literal properties
    "keyword-spacing": 1, //require a space after certain keywords
    "lines-around-comment": 1, //enforce empty lines around comments
    "linebreak-style": 1, //disallow mixed 'LF' and 'CRLF' as linebreaks
    "max-nested-callbacks": 1, //specify the maximum depth callbacks can be nested
    "new-cap": 1, //require a capital letter for constructors
    "new-parens": 1, //disallow the omission of parentheses when invoking a constructor th no arguments
    "newline-after-var": 0, //require or disallow an empty newline after variable clarations
    "no-array-constructor": 1, //disallow use of the Array constructor
    "no-continue": 1, //disallow use of the continue statement
    "no-inline-comments": 0, //disallow comments inline after code
    "no-lonely-if": 1, //disallow if as the only statement in an else block
    "no-mixed-spaces-and-tabs": 1, //disallow mixed spaces and tabs for indentation (commended)
    "no-multiple-empty-lines": 1, //disallow multiple empty lines
    "no-nested-ternary": 1, //disallow nested ternary expressions
    "no-new-object": 1, //disallow the use of the Object constructor
    "no-spaced-func": 1, //disallow space between function identifier and application
    "no-ternary": 0, //disallow the use of ternary operators
    "no-trailing-spaces": 1, //disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0, //disallow dangling underscores in identifiers
    "no-unneeded-ternary": 1, //disallow the use of Boolean literals in conditional pressions
    "object-curly-spacing": 0, //require or disallow padding inside curly braces
    "one-var": 0, //require or disallow one variable declaration per function
    "operator-assignment": 1, //require assignment operator shorthand where possible or ohibit it entirely
    "operator-linebreak": 1, //enforce operators to be placed before or after line breaks
    "padded-blocks": 0, //enforce padding within blocks
    "quote-props": 0, //require quotes around object literal property names
    "quotes": [2, "single"], //specify whether backticks, double or single quotes should be ed
    "id-match": 1, //require identifiers to match the provided regular expression
    "semi-spacing": 1, //enforce spacing before and after semicolons
    "semi": 1, //require or disallow use of semicolons instead of ASI
    "sort-vars": 0, //sort variables within the same declaration block
    "space-before-blocks": 1, //require or disallow a space before blocks
    "space-before-function-paren": 0, //require or disallow a space before function opening renthesis
    "space-in-parens": 1, //require or disallow spaces inside parentheses
    "space-infix-ops": 1, //require spaces around operators
    "space-unary-ops": 1, //require or disallow spaces before/after unary operators
    "spaced-comment": 1, //require or disallow a space immediately following the // or /*  a comment
    "wrap-regex": 1 //require regex literals to be wrapped in parentheses
  }
}
